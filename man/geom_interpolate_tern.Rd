% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-interpolate-tern.R, R/stat-interpolate-tern.R
\docType{data}
\name{geom_interpolate_tern}
\alias{GeomInterpolateTern}
\alias{StatInterpolateTern}
\alias{geom_interpolate_tern}
\alias{stat_interpolate_tern}
\title{Ternary Interpolation}
\format{An object of class \code{StatInterpolateTern} (inherits from \code{Stat}, \code{ggproto}) of length 6.}
\usage{
geom_interpolate_tern(mapping = NULL, data = NULL,
  stat = "InterpolateTern", position = "identity", ..., lineend = "butt",
  linejoin = "round", linemitre = 1, na.rm = FALSE, show.legend = NA,
  inherit.aes = TRUE, method = "auto", formula = value ~ poly(x, y, degree
  = 1), base = "ilr")

stat_interpolate_tern(mapping = NULL, data = NULL,
  geom = "interpolate_tern", position = "identity", ..., method = "auto",
  na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, n = 80,
  formula = value ~ poly(x, y, degree = 1), base = "ilr")
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link{aes}} or
\code{\link{aes_}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
   options:

   If \code{NULL}, the default, the data is inherited from the plot
   data as specified in the call to \code{\link{ggplot}}.

   A \code{data.frame}, or other object, will override the plot
   data. All objects will be fortified to produce a data frame. See
   \code{\link{fortify}} for which variables will be created.

   A \code{function} will be called with a single argument,
   the plot data. The return value must be a \code{data.frame.}, and
   will be used as the layer data.}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{...}{other arguments passed on to \code{\link{layer}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{color = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{lineend}{Line end style (round, butt, square)}

\item{linejoin}{Line join style (round, mitre, bevel)}

\item{linemitre}{Line mitre limit (number greater than 1)}

\item{na.rm}{If \code{FALSE} (the default), removes missing values with
a warning.  If \code{TRUE} silently removes missing values.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link{borders}}.}

\item{method}{smoothing method (function) to use, eg. lm, glm, gam, loess,
rlm. For datasets with n < 1000 default is \code{\link{loess}}. For datasets
with 1000 or more observations defaults to gam, see \code{\link[mgcv]{gam}}
for more details.}

\item{formula}{formula to use in smoothing function, eg. \code{y ~ x},
\code{y ~ poly(x, 2)}, \code{y ~ log(x)}}

\item{base}{the base transformation of the data, options include 'identity' (ie direct on the cartesian space), or 'ilr'
which means to use the isometric log ratio transformation.}

\item{geom}{Use to override the default connection between
\code{geom_smooth} and \code{stat_smooth}.}

\item{n}{number of grid points in each direction}
}
\description{
This is the heavily requested geometry for interpolating between ternary values, results being
rendered using contours on a ternary mesh.
}
\section{Aesthetics}{
 
\Sexpr[results=rd,stage=build]{ggtern:::rd_aesthetics("geom", "InterpolateTern")}
}
\examples{
data(Feldspar)
ggtern(Feldspar,aes(Ab,An,Or,value=T.C)) + 
stat_interpolate_tern(geom="polygon",
                     formula=value~x+y,
                     method=lm,n=100,
                     breaks=seq(0,1000,by=100),
                     aes(fill=..level..),expand=1) +
                     geom_point()
}
\keyword{datasets}

